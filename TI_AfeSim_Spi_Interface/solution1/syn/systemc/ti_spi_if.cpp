// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ti_spi_if.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ti_spi_if::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ti_spi_if::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> ti_spi_if::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> ti_spi_if::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool ti_spi_if::ap_const_boolean_1 = true;
const bool ti_spi_if::ap_const_boolean_0 = false;
const sc_lv<1> ti_spi_if::ap_const_lv1_0 = "0";
const sc_lv<16> ti_spi_if::ap_const_lv16_0 = "0000000000000000";
const int ti_spi_if::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<1> ti_spi_if::ap_const_lv1_1 = "1";
const sc_lv<32> ti_spi_if::ap_const_lv32_1 = "1";
const sc_lv<16> ti_spi_if::ap_const_lv16_1 = "1";
const sc_lv<32> ti_spi_if::ap_const_lv32_2 = "10";
const sc_lv<32> ti_spi_if::ap_const_lv32_3 = "11";
const sc_lv<8> ti_spi_if::ap_const_lv8_FF = "11111111";

ti_spi_if::ti_spi_if(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ti_spi_if_AXILiteS_s_axi_U = new ti_spi_if_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("ti_spi_if_AXILiteS_s_axi_U");
    ti_spi_if_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    ti_spi_if_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    ti_spi_if_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    ti_spi_if_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    ti_spi_if_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    ti_spi_if_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    ti_spi_if_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    ti_spi_if_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    ti_spi_if_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    ti_spi_if_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    ti_spi_if_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    ti_spi_if_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    ti_spi_if_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    ti_spi_if_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    ti_spi_if_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    ti_spi_if_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    ti_spi_if_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    ti_spi_if_AXILiteS_s_axi_U->ACLK(ap_clk);
    ti_spi_if_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    ti_spi_if_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    ti_spi_if_AXILiteS_s_axi_U->ap_start(ap_start);
    ti_spi_if_AXILiteS_s_axi_U->interrupt(interrupt);
    ti_spi_if_AXILiteS_s_axi_U->ap_ready(ap_ready);
    ti_spi_if_AXILiteS_s_axi_U->ap_done(ap_done);
    ti_spi_if_AXILiteS_s_axi_U->ap_idle(ap_idle);
    ti_spi_if_AXILiteS_s_axi_U->Ctrl_PS(Ctrl_PS);
    ti_spi_if_AXILiteS_s_axi_U->FifoByteNum_PS(FifoByteNum_PS);
    ti_spi_if_AXILiteS_s_axi_U->StringUpdate(StringUpdate_1_data_reg);
    ti_spi_if_AXILiteS_s_axi_U->StringUpdate_ap_vld(StringUpdate_1_vld_reg);
    ti_spi_if_AXILiteS_s_axi_U->StringLen(StringLen_1_data_reg);
    ti_spi_if_AXILiteS_s_axi_U->StringLen_ap_vld(StringLen_1_vld_reg);
    ti_spi_if_AXILiteS_s_axi_U->MISO_Sel_o(ap_var_for_const1);
    ti_spi_if_AXILiteS_s_axi_U->MISO_Sel_o_ap_vld(MISO_Sel_1_vld_reg);
    ti_spi_if_AXILiteS_s_axi_U->MISO_Sel_i(MISO_Sel_i);
    ti_spi_if_AXILiteS_s_axi_U->MOSI_data_address0(MOSI_data_address0);
    ti_spi_if_AXILiteS_s_axi_U->MOSI_data_ce0(MOSI_data_ce0);
    ti_spi_if_AXILiteS_s_axi_U->MOSI_data_we0(MOSI_data_we0);
    ti_spi_if_AXILiteS_s_axi_U->MOSI_data_d0(MOSI_in_read_reg_372_pp0_iter1_reg);
    ti_spi_if_AXILiteS_s_axi_U->MISO_data_address0(MISO_data_address0);
    ti_spi_if_AXILiteS_s_axi_U->MISO_data_ce0(MISO_data_ce0);
    ti_spi_if_AXILiteS_s_axi_U->MISO_data_q0(MISO_data_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Ctrl_PS_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_INH_RESET);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( Ctrl_PS_0_data_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_INH_SET);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( Ctrl_PS_0_data_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_MISO_Sel_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_MISO_Sel_1_ack_in);
    sensitive << ( MISO_Sel_1_vld_reg );

    SC_METHOD(thread_MISO_Sel_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( Update_Byte_Out_load_reg_377 );
    sensitive << ( Update_String_Out_lo_reg_382 );

    SC_METHOD(thread_MISO_data_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_1_fu_299_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_MISO_data_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_MISO_out);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( MISO_data_load_reg_402 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_s_fu_358_p2 );

    SC_METHOD(thread_MOSI_data_address0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_1_reg_392_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_MOSI_data_ce0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_MOSI_data_we0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( Update_Byte_Out_load_reg_377_pp0_iter1_reg );

    SC_METHOD(thread_RDY_RESET);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( Ctrl_PS_0_data_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_RDY_SET);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( Ctrl_PS_0_data_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_StringLen_1_ack_in);
    sensitive << ( StringLen_1_vld_reg );

    SC_METHOD(thread_StringLen_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( Update_Byte_Out_load_reg_377 );
    sensitive << ( Update_String_Out_lo_reg_382 );

    SC_METHOD(thread_StringUpdate_1_ack_in);
    sensitive << ( StringUpdate_1_vld_reg );

    SC_METHOD(thread_StringUpdate_1_data_in);
    sensitive << ( Update_Byte_Out_load_reg_377 );
    sensitive << ( Update_String_Out_lo_reg_382 );
    sensitive << ( ap_condition_338 );

    SC_METHOD(thread_StringUpdate_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( Update_Byte_Out_load_reg_377 );
    sensitive << ( Update_String_Out_lo_reg_382 );

    SC_METHOD(thread_Update_Byte_Out);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( Update_Byte_Out_load_reg_377_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_Update_Byte_Out_load_fu_245_p2);
    sensitive << ( Update_Byte_Delay_0 );
    sensitive << ( tmp_3_fu_239_p2 );

    SC_METHOD(thread_Update_String_Out);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( Update_String_Out_lo_reg_382_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_Update_String_Out_lo_fu_265_p2);
    sensitive << ( Update_String_Delay_s );
    sensitive << ( tmp_5_fu_259_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( StringUpdate_1_ack_in );
    sensitive << ( StringLen_1_ack_in );
    sensitive << ( MISO_Sel_1_ack_in );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( StringUpdate_1_ack_in );
    sensitive << ( StringLen_1_ack_in );
    sensitive << ( MISO_Sel_1_ack_in );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( StringUpdate_1_ack_in );
    sensitive << ( StringLen_1_ack_in );
    sensitive << ( MISO_Sel_1_ack_in );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( StringUpdate_1_ack_in );
    sensitive << ( StringLen_1_ack_in );
    sensitive << ( MISO_Sel_1_ack_in );

    SC_METHOD(thread_ap_condition_338);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_condition_58);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_tmp_1_fu_299_p1);
    sensitive << ( ByteCnt );

    SC_METHOD(thread_tmp_3_fu_239_p2);
    sensitive << ( Update_Byte_Delay_1 );

    SC_METHOD(thread_tmp_4_fu_310_p2);
    sensitive << ( ByteCnt );

    SC_METHOD(thread_tmp_5_fu_259_p2);
    sensitive << ( Update_String_Delay_1 );

    SC_METHOD(thread_tmp_7_fu_322_p1);
    sensitive << ( ByteCnt_load_reg_387 );

    SC_METHOD(thread_tmp_s_fu_358_p2);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( MISO_Sel_0_data_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    Ctrl_PS_0_data_reg = "00000000000000000000000000000000";
    Ctrl_PS_0_vld_reg = SC_LOGIC_0;
    StringUpdate_1_data_reg = "00000000000000000000000000000000";
    StringUpdate_1_vld_reg = SC_LOGIC_0;
    StringLen_1_data_reg = "00000000000000000000000000000000";
    StringLen_1_vld_reg = SC_LOGIC_0;
    MISO_Sel_0_data_reg = "00000000000000000000000000000000";
    MISO_Sel_0_vld_reg = SC_LOGIC_0;
    MISO_Sel_1_vld_reg = SC_LOGIC_0;
    Update_Byte_Delay_0 = "0";
    Update_Byte_Delay_1 = "0";
    Update_String_Delay_s = "0";
    Update_String_Delay_1 = "0";
    ByteCnt = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ti_spi_if_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, MOSI_in, "(port)MOSI_in");
    sc_trace(mVcdFile, MISO_out, "(port)MISO_out");
    sc_trace(mVcdFile, Update_Byte_In, "(port)Update_Byte_In");
    sc_trace(mVcdFile, Update_String_In, "(port)Update_String_In");
    sc_trace(mVcdFile, Update_Byte_Out, "(port)Update_Byte_Out");
    sc_trace(mVcdFile, Update_String_Out, "(port)Update_String_Out");
    sc_trace(mVcdFile, RDY_SET, "(port)RDY_SET");
    sc_trace(mVcdFile, RDY_RESET, "(port)RDY_RESET");
    sc_trace(mVcdFile, INH_SET, "(port)INH_SET");
    sc_trace(mVcdFile, INH_RESET, "(port)INH_RESET");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, StringUpdate_1_ack_in, "StringUpdate_1_ack_in");
    sc_trace(mVcdFile, StringLen_1_ack_in, "StringLen_1_ack_in");
    sc_trace(mVcdFile, MISO_Sel_1_ack_in, "MISO_Sel_1_ack_in");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, Ctrl_PS, "Ctrl_PS");
    sc_trace(mVcdFile, Ctrl_PS_0_data_reg, "Ctrl_PS_0_data_reg");
    sc_trace(mVcdFile, Ctrl_PS_0_vld_reg, "Ctrl_PS_0_vld_reg");
    sc_trace(mVcdFile, Ctrl_PS_0_ack_out, "Ctrl_PS_0_ack_out");
    sc_trace(mVcdFile, FifoByteNum_PS, "FifoByteNum_PS");
    sc_trace(mVcdFile, StringUpdate_1_data_reg, "StringUpdate_1_data_reg");
    sc_trace(mVcdFile, StringUpdate_1_data_in, "StringUpdate_1_data_in");
    sc_trace(mVcdFile, StringUpdate_1_vld_reg, "StringUpdate_1_vld_reg");
    sc_trace(mVcdFile, StringUpdate_1_vld_in, "StringUpdate_1_vld_in");
    sc_trace(mVcdFile, StringLen_1_data_reg, "StringLen_1_data_reg");
    sc_trace(mVcdFile, StringLen_1_vld_reg, "StringLen_1_vld_reg");
    sc_trace(mVcdFile, StringLen_1_vld_in, "StringLen_1_vld_in");
    sc_trace(mVcdFile, MISO_Sel_i, "MISO_Sel_i");
    sc_trace(mVcdFile, MISO_Sel_0_data_reg, "MISO_Sel_0_data_reg");
    sc_trace(mVcdFile, MISO_Sel_0_vld_reg, "MISO_Sel_0_vld_reg");
    sc_trace(mVcdFile, MISO_Sel_0_ack_out, "MISO_Sel_0_ack_out");
    sc_trace(mVcdFile, MISO_Sel_1_vld_reg, "MISO_Sel_1_vld_reg");
    sc_trace(mVcdFile, MISO_Sel_1_vld_in, "MISO_Sel_1_vld_in");
    sc_trace(mVcdFile, MOSI_data_address0, "MOSI_data_address0");
    sc_trace(mVcdFile, MOSI_data_ce0, "MOSI_data_ce0");
    sc_trace(mVcdFile, MOSI_data_we0, "MOSI_data_we0");
    sc_trace(mVcdFile, MISO_data_address0, "MISO_data_address0");
    sc_trace(mVcdFile, MISO_data_ce0, "MISO_data_ce0");
    sc_trace(mVcdFile, MISO_data_q0, "MISO_data_q0");
    sc_trace(mVcdFile, Update_Byte_Delay_0, "Update_Byte_Delay_0");
    sc_trace(mVcdFile, Update_Byte_Delay_1, "Update_Byte_Delay_1");
    sc_trace(mVcdFile, Update_String_Delay_s, "Update_String_Delay_s");
    sc_trace(mVcdFile, Update_String_Delay_1, "Update_String_Delay_1");
    sc_trace(mVcdFile, ByteCnt, "ByteCnt");
    sc_trace(mVcdFile, MOSI_in_read_reg_372, "MOSI_in_read_reg_372");
    sc_trace(mVcdFile, MOSI_in_read_reg_372_pp0_iter1_reg, "MOSI_in_read_reg_372_pp0_iter1_reg");
    sc_trace(mVcdFile, Update_Byte_Out_load_fu_245_p2, "Update_Byte_Out_load_fu_245_p2");
    sc_trace(mVcdFile, Update_Byte_Out_load_reg_377, "Update_Byte_Out_load_reg_377");
    sc_trace(mVcdFile, Update_Byte_Out_load_reg_377_pp0_iter1_reg, "Update_Byte_Out_load_reg_377_pp0_iter1_reg");
    sc_trace(mVcdFile, Update_String_Out_lo_fu_265_p2, "Update_String_Out_lo_fu_265_p2");
    sc_trace(mVcdFile, Update_String_Out_lo_reg_382, "Update_String_Out_lo_reg_382");
    sc_trace(mVcdFile, Update_String_Out_lo_reg_382_pp0_iter1_reg, "Update_String_Out_lo_reg_382_pp0_iter1_reg");
    sc_trace(mVcdFile, ByteCnt_load_reg_387, "ByteCnt_load_reg_387");
    sc_trace(mVcdFile, tmp_1_fu_299_p1, "tmp_1_fu_299_p1");
    sc_trace(mVcdFile, tmp_1_reg_392, "tmp_1_reg_392");
    sc_trace(mVcdFile, tmp_1_reg_392_pp0_iter1_reg, "tmp_1_reg_392_pp0_iter1_reg");
    sc_trace(mVcdFile, MISO_data_load_reg_402, "MISO_data_load_reg_402");
    sc_trace(mVcdFile, tmp_7_fu_322_p1, "tmp_7_fu_322_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_4_fu_310_p2, "tmp_4_fu_310_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_3_fu_239_p2, "tmp_3_fu_239_p2");
    sc_trace(mVcdFile, tmp_5_fu_259_p2, "tmp_5_fu_259_p2");
    sc_trace(mVcdFile, tmp_s_fu_358_p2, "tmp_s_fu_358_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_58, "ap_condition_58");
    sc_trace(mVcdFile, ap_condition_338, "ap_condition_338");
#endif

    }
    mHdltvinHandle.open("ti_spi_if.hdltvin.dat");
    mHdltvoutHandle.open("ti_spi_if.hdltvout.dat");
}

ti_spi_if::~ti_spi_if() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete ti_spi_if_AXILiteS_s_axi_U;
}

void ti_spi_if::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ti_spi_if::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void ti_spi_if::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_condition_58.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(Update_Byte_Out_load_fu_245_p2.read(), ap_const_lv1_1)) {
            ByteCnt = tmp_4_fu_310_p2.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, Update_Byte_Out_load_fu_245_p2.read()) && 
                    esl_seteq<1,1,1>(Update_String_Out_lo_fu_265_p2.read(), ap_const_lv1_1))) {
            ByteCnt = ap_const_lv16_0;
        }
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, MISO_Sel_1_vld_in.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, MISO_Sel_1_vld_reg.read()))) {
        MISO_Sel_1_vld_reg = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, MISO_Sel_1_vld_in.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, MISO_Sel_1_vld_reg.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1))) {
        MISO_Sel_1_vld_reg = ap_const_logic_0;
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, StringLen_1_vld_in.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, StringLen_1_vld_reg.read()))) {
        StringLen_1_vld_reg = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, StringLen_1_vld_in.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, StringLen_1_vld_reg.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1))) {
        StringLen_1_vld_reg = ap_const_logic_0;
    }
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, StringUpdate_1_vld_in.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, StringUpdate_1_vld_reg.read()))) {
        StringUpdate_1_vld_reg = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, StringUpdate_1_vld_in.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, StringUpdate_1_vld_reg.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1))) {
        StringUpdate_1_vld_reg = ap_const_logic_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ByteCnt_load_reg_387 = ByteCnt.read();
        MISO_data_load_reg_402 = MISO_data_q0.read();
        MOSI_in_read_reg_372 = MOSI_in.read();
        MOSI_in_read_reg_372_pp0_iter1_reg = MOSI_in_read_reg_372.read();
        Update_Byte_Out_load_reg_377 = Update_Byte_Out_load_fu_245_p2.read();
        Update_Byte_Out_load_reg_377_pp0_iter1_reg = Update_Byte_Out_load_reg_377.read();
        Update_String_Out_lo_reg_382 = Update_String_Out_lo_fu_265_p2.read();
        Update_String_Out_lo_reg_382_pp0_iter1_reg = Update_String_Out_lo_reg_382.read();
        tmp_1_reg_392 = tmp_1_fu_299_p1.read();
        tmp_1_reg_392_pp0_iter1_reg = tmp_1_reg_392.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, Ctrl_PS_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, Ctrl_PS_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, Ctrl_PS_0_ack_out.read())))) {
        Ctrl_PS_0_data_reg = Ctrl_PS.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, MISO_Sel_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, MISO_Sel_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, MISO_Sel_0_ack_out.read())))) {
        MISO_Sel_0_data_reg = MISO_Sel_i.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, StringLen_1_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, StringLen_1_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, StringLen_1_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, StringLen_1_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        StringLen_1_data_reg = tmp_7_fu_322_p1.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, StringUpdate_1_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, StringUpdate_1_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, StringUpdate_1_vld_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, StringUpdate_1_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        StringUpdate_1_data_reg = StringUpdate_1_data_in.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        Update_Byte_Delay_0 = Update_Byte_In.read();
        Update_Byte_Delay_1 = Update_Byte_Delay_0.read();
        Update_String_Delay_1 = Update_String_Delay_s.read();
        Update_String_Delay_s = Update_String_In.read();
    }
}

void ti_spi_if::thread_Ctrl_PS_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        Ctrl_PS_0_ack_out = ap_const_logic_1;
    } else {
        Ctrl_PS_0_ack_out = ap_const_logic_0;
    }
}

void ti_spi_if::thread_INH_RESET() {
    INH_RESET = Ctrl_PS_0_data_reg.read().range(3, 3);
}

void ti_spi_if::thread_INH_SET() {
    INH_SET = Ctrl_PS_0_data_reg.read().range(2, 2);
}

void ti_spi_if::thread_MISO_Sel_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        MISO_Sel_0_ack_out = ap_const_logic_1;
    } else {
        MISO_Sel_0_ack_out = ap_const_logic_0;
    }
}

void ti_spi_if::thread_MISO_Sel_1_ack_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, MISO_Sel_1_vld_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, MISO_Sel_1_vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        MISO_Sel_1_ack_in = ap_const_logic_1;
    } else {
        MISO_Sel_1_ack_in = ap_const_logic_0;
    }
}

void ti_spi_if::thread_MISO_Sel_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, Update_Byte_Out_load_reg_377.read()) && 
         esl_seteq<1,1,1>(Update_String_Out_lo_reg_382.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        MISO_Sel_1_vld_in = ap_const_logic_1;
    } else {
        MISO_Sel_1_vld_in = ap_const_logic_0;
    }
}

void ti_spi_if::thread_MISO_data_address0() {
    MISO_data_address0 =  (sc_lv<7>) (tmp_1_fu_299_p1.read());
}

void ti_spi_if::thread_MISO_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        MISO_data_ce0 = ap_const_logic_1;
    } else {
        MISO_data_ce0 = ap_const_logic_0;
    }
}

void ti_spi_if::thread_MISO_out() {
    MISO_out = (!tmp_s_fu_358_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_s_fu_358_p2.read()[0].to_bool())? ap_const_lv8_FF: MISO_data_load_reg_402.read());
}

void ti_spi_if::thread_MOSI_data_address0() {
    MOSI_data_address0 =  (sc_lv<12>) (tmp_1_reg_392_pp0_iter1_reg.read());
}

void ti_spi_if::thread_MOSI_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        MOSI_data_ce0 = ap_const_logic_1;
    } else {
        MOSI_data_ce0 = ap_const_logic_0;
    }
}

void ti_spi_if::thread_MOSI_data_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(Update_Byte_Out_load_reg_377_pp0_iter1_reg.read(), ap_const_lv1_1))) {
        MOSI_data_we0 = ap_const_logic_1;
    } else {
        MOSI_data_we0 = ap_const_logic_0;
    }
}

void ti_spi_if::thread_RDY_RESET() {
    RDY_RESET = Ctrl_PS_0_data_reg.read().range(1, 1);
}

void ti_spi_if::thread_RDY_SET() {
    RDY_SET = Ctrl_PS_0_data_reg.read().range(1-1, 0);
}

void ti_spi_if::thread_StringLen_1_ack_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, StringLen_1_vld_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, StringLen_1_vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        StringLen_1_ack_in = ap_const_logic_1;
    } else {
        StringLen_1_ack_in = ap_const_logic_0;
    }
}

void ti_spi_if::thread_StringLen_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, Update_Byte_Out_load_reg_377.read()) && 
         esl_seteq<1,1,1>(Update_String_Out_lo_reg_382.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        StringLen_1_vld_in = ap_const_logic_1;
    } else {
        StringLen_1_vld_in = ap_const_logic_0;
    }
}

void ti_spi_if::thread_StringUpdate_1_ack_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, StringUpdate_1_vld_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, StringUpdate_1_vld_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)))) {
        StringUpdate_1_ack_in = ap_const_logic_1;
    } else {
        StringUpdate_1_ack_in = ap_const_logic_0;
    }
}

void ti_spi_if::thread_StringUpdate_1_data_in() {
    if (esl_seteq<1,1,1>(ap_condition_338.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(Update_Byte_Out_load_reg_377.read(), ap_const_lv1_1)) {
            StringUpdate_1_data_in = ap_const_lv32_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, Update_Byte_Out_load_reg_377.read()) && 
                    esl_seteq<1,1,1>(Update_String_Out_lo_reg_382.read(), ap_const_lv1_1))) {
            StringUpdate_1_data_in = ap_const_lv32_1;
        } else {
            StringUpdate_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        StringUpdate_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void ti_spi_if::thread_StringUpdate_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, Update_Byte_Out_load_reg_377.read()) && 
          esl_seteq<1,1,1>(Update_String_Out_lo_reg_382.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(Update_Byte_Out_load_reg_377.read(), ap_const_lv1_1)))) {
        StringUpdate_1_vld_in = ap_const_logic_1;
    } else {
        StringUpdate_1_vld_in = ap_const_logic_0;
    }
}

void ti_spi_if::thread_Update_Byte_Out() {
    Update_Byte_Out = Update_Byte_Out_load_reg_377_pp0_iter1_reg.read();
}

void ti_spi_if::thread_Update_Byte_Out_load_fu_245_p2() {
    Update_Byte_Out_load_fu_245_p2 = (Update_Byte_Delay_0.read() & tmp_3_fu_239_p2.read());
}

void ti_spi_if::thread_Update_String_Out() {
    Update_String_Out = Update_String_Out_lo_reg_382_pp0_iter1_reg.read();
}

void ti_spi_if::thread_Update_String_Out_lo_fu_265_p2() {
    Update_String_Out_lo_fu_265_p2 = (Update_String_Delay_s.read() & tmp_5_fu_259_p2.read());
}

void ti_spi_if::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void ti_spi_if::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ti_spi_if::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, StringUpdate_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, StringLen_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, MISO_Sel_1_ack_in.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void ti_spi_if::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, StringUpdate_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, StringLen_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, MISO_Sel_1_ack_in.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void ti_spi_if::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, StringUpdate_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, StringLen_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, MISO_Sel_1_ack_in.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void ti_spi_if::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void ti_spi_if::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ti_spi_if::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_logic_0, StringUpdate_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, StringLen_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, MISO_Sel_1_ack_in.read()));
}

void ti_spi_if::thread_ap_condition_338() {
    ap_condition_338 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void ti_spi_if::thread_ap_condition_58() {
    ap_condition_58 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void ti_spi_if::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ti_spi_if::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void ti_spi_if::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void ti_spi_if::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ti_spi_if::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void ti_spi_if::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void ti_spi_if::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ti_spi_if::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void ti_spi_if::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ti_spi_if::thread_tmp_1_fu_299_p1() {
    tmp_1_fu_299_p1 = esl_zext<64,16>(ByteCnt.read());
}

void ti_spi_if::thread_tmp_3_fu_239_p2() {
    tmp_3_fu_239_p2 = (Update_Byte_Delay_1.read() ^ ap_const_lv1_1);
}

void ti_spi_if::thread_tmp_4_fu_310_p2() {
    tmp_4_fu_310_p2 = (!ByteCnt.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(ByteCnt.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void ti_spi_if::thread_tmp_5_fu_259_p2() {
    tmp_5_fu_259_p2 = (Update_String_Delay_1.read() ^ ap_const_lv1_1);
}

void ti_spi_if::thread_tmp_7_fu_322_p1() {
    tmp_7_fu_322_p1 = esl_zext<32,16>(ByteCnt_load_reg_387.read());
}

void ti_spi_if::thread_tmp_s_fu_358_p2() {
    tmp_s_fu_358_p2 = (!MISO_Sel_0_data_reg.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(MISO_Sel_0_data_reg.read() == ap_const_lv32_0);
}

void ti_spi_if::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void ti_spi_if::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"MOSI_in\" :  \"" << MOSI_in.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"MISO_out\" :  \"" << MISO_out.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Update_Byte_In\" :  \"" << Update_Byte_In.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Update_String_In\" :  \"" << Update_String_In.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Update_Byte_Out\" :  \"" << Update_Byte_Out.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Update_String_Out\" :  \"" << Update_String_Out.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RDY_SET\" :  \"" << RDY_SET.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"RDY_RESET\" :  \"" << RDY_RESET.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"INH_SET\" :  \"" << INH_SET.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"INH_RESET\" :  \"" << INH_RESET.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


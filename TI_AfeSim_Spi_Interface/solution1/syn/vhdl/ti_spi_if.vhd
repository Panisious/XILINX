-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ti_spi_if is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    MOSI_in : IN STD_LOGIC_VECTOR (7 downto 0);
    MISO_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    Update_Byte_In : IN STD_LOGIC_VECTOR (0 downto 0);
    Update_String_In : IN STD_LOGIC_VECTOR (0 downto 0);
    Update_Byte_Out : OUT STD_LOGIC_VECTOR (0 downto 0);
    Update_String_Out : OUT STD_LOGIC_VECTOR (0 downto 0);
    RDY_SET : OUT STD_LOGIC_VECTOR (0 downto 0);
    RDY_RESET : OUT STD_LOGIC_VECTOR (0 downto 0);
    INH_SET : OUT STD_LOGIC_VECTOR (0 downto 0);
    INH_RESET : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ti_spi_if is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ti_spi_if,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.414000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=638,HLS_SYN_LUT=618,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal StringUpdate_1_ack_in : STD_LOGIC;
    signal StringLen_1_ack_in : STD_LOGIC;
    signal MISO_Sel_1_ack_in : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal Ctrl_PS : STD_LOGIC_VECTOR (31 downto 0);
    signal Ctrl_PS_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Ctrl_PS_0_vld_reg : STD_LOGIC := '0';
    signal Ctrl_PS_0_ack_out : STD_LOGIC;
    signal FifoByteNum_PS : STD_LOGIC_VECTOR (31 downto 0);
    signal StringUpdate_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal StringUpdate_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal StringUpdate_1_vld_reg : STD_LOGIC := '0';
    signal StringUpdate_1_vld_in : STD_LOGIC;
    signal StringLen_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal StringLen_1_vld_reg : STD_LOGIC := '0';
    signal StringLen_1_vld_in : STD_LOGIC;
    signal MISO_Sel_i : STD_LOGIC_VECTOR (31 downto 0);
    signal MISO_Sel_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal MISO_Sel_0_vld_reg : STD_LOGIC := '0';
    signal MISO_Sel_0_ack_out : STD_LOGIC;
    signal MISO_Sel_1_vld_reg : STD_LOGIC := '0';
    signal MISO_Sel_1_vld_in : STD_LOGIC;
    signal MOSI_data_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal MOSI_data_ce0 : STD_LOGIC;
    signal MOSI_data_we0 : STD_LOGIC;
    signal MISO_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal MISO_data_ce0 : STD_LOGIC;
    signal MISO_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Update_Byte_Delay_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal Update_Byte_Delay_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal Update_String_Delay_s : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal Update_String_Delay_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ByteCnt : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal MOSI_in_read_reg_372 : STD_LOGIC_VECTOR (7 downto 0);
    signal MOSI_in_read_reg_372_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Update_Byte_Out_load_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Update_Byte_Out_load_reg_377 : STD_LOGIC_VECTOR (0 downto 0);
    signal Update_Byte_Out_load_reg_377_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Update_String_Out_lo_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Update_String_Out_lo_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal Update_String_Out_lo_reg_382_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ByteCnt_load_reg_387 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_392 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_392_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal MISO_data_load_reg_402 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_4_fu_310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_3_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_58 : BOOLEAN;
    signal ap_condition_338 : BOOLEAN;

    component ti_spi_if_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        Ctrl_PS : OUT STD_LOGIC_VECTOR (31 downto 0);
        FifoByteNum_PS : OUT STD_LOGIC_VECTOR (31 downto 0);
        StringUpdate : IN STD_LOGIC_VECTOR (31 downto 0);
        StringUpdate_ap_vld : IN STD_LOGIC;
        StringLen : IN STD_LOGIC_VECTOR (31 downto 0);
        StringLen_ap_vld : IN STD_LOGIC;
        MISO_Sel_o : IN STD_LOGIC_VECTOR (31 downto 0);
        MISO_Sel_o_ap_vld : IN STD_LOGIC;
        MISO_Sel_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        MOSI_data_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        MOSI_data_ce0 : IN STD_LOGIC;
        MOSI_data_we0 : IN STD_LOGIC;
        MOSI_data_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        MISO_data_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        MISO_data_ce0 : IN STD_LOGIC;
        MISO_data_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ti_spi_if_AXILiteS_s_axi_U : component ti_spi_if_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        Ctrl_PS => Ctrl_PS,
        FifoByteNum_PS => FifoByteNum_PS,
        StringUpdate => StringUpdate_1_data_reg,
        StringUpdate_ap_vld => StringUpdate_1_vld_reg,
        StringLen => StringLen_1_data_reg,
        StringLen_ap_vld => StringLen_1_vld_reg,
        MISO_Sel_o => ap_const_lv32_0,
        MISO_Sel_o_ap_vld => MISO_Sel_1_vld_reg,
        MISO_Sel_i => MISO_Sel_i,
        MOSI_data_address0 => MOSI_data_address0,
        MOSI_data_ce0 => MOSI_data_ce0,
        MOSI_data_we0 => MOSI_data_we0,
        MOSI_data_d0 => MOSI_in_read_reg_372_pp0_iter1_reg,
        MISO_data_address0 => MISO_data_address0,
        MISO_data_ce0 => MISO_data_ce0,
        MISO_data_q0 => MISO_data_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ByteCnt_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_58)) then
                if ((ap_const_lv1_1 = Update_Byte_Out_load_fu_245_p2)) then 
                    ByteCnt <= tmp_4_fu_310_p2;
                elsif (((ap_const_lv1_1 = Update_String_Out_lo_fu_265_p2) and (ap_const_lv1_0 = Update_Byte_Out_load_fu_245_p2))) then 
                    ByteCnt <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    Ctrl_PS_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MISO_Sel_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MISO_Sel_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_0 = MISO_Sel_1_vld_reg) and (ap_const_logic_1 = MISO_Sel_1_vld_in))) then 
                MISO_Sel_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_0 = MISO_Sel_1_vld_in) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = MISO_Sel_1_vld_reg))) then 
                MISO_Sel_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    StringLen_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_0 = StringLen_1_vld_reg) and (ap_const_logic_1 = StringLen_1_vld_in))) then 
                StringLen_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_0 = StringLen_1_vld_in) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = StringLen_1_vld_reg))) then 
                StringLen_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    StringUpdate_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_0 = StringUpdate_1_vld_reg) and (ap_const_logic_1 = StringUpdate_1_vld_in))) then 
                StringUpdate_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_0 = StringUpdate_1_vld_in) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = StringUpdate_1_vld_reg))) then 
                StringUpdate_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ByteCnt_load_reg_387 <= ByteCnt;
                MISO_data_load_reg_402 <= MISO_data_q0;
                MOSI_in_read_reg_372 <= MOSI_in;
                MOSI_in_read_reg_372_pp0_iter1_reg <= MOSI_in_read_reg_372;
                Update_Byte_Out_load_reg_377 <= Update_Byte_Out_load_fu_245_p2;
                Update_Byte_Out_load_reg_377_pp0_iter1_reg <= Update_Byte_Out_load_reg_377;
                Update_String_Out_lo_reg_382 <= Update_String_Out_lo_fu_265_p2;
                Update_String_Out_lo_reg_382_pp0_iter1_reg <= Update_String_Out_lo_reg_382;
                    tmp_1_reg_392(15 downto 0) <= tmp_1_fu_299_p1(15 downto 0);
                    tmp_1_reg_392_pp0_iter1_reg(15 downto 0) <= tmp_1_reg_392(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_0 = Ctrl_PS_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_1 = Ctrl_PS_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Ctrl_PS_0_vld_reg)))) then
                Ctrl_PS_0_data_reg <= Ctrl_PS;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_0 = MISO_Sel_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_1 = MISO_Sel_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = MISO_Sel_0_vld_reg)))) then
                MISO_Sel_0_data_reg <= MISO_Sel_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_0 = StringLen_1_vld_reg) and (ap_const_logic_1 = StringLen_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = StringLen_1_vld_in) and (ap_const_logic_1 = StringLen_1_vld_reg)))) then
                    StringLen_1_data_reg(15 downto 0) <= tmp_7_fu_322_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_0 = StringUpdate_1_vld_reg) and (ap_const_logic_1 = StringUpdate_1_vld_in)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = StringUpdate_1_vld_in) and (ap_const_logic_1 = StringUpdate_1_vld_reg)))) then
                StringUpdate_1_data_reg <= StringUpdate_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Update_Byte_Delay_0 <= Update_Byte_In;
                Update_Byte_Delay_1 <= Update_Byte_Delay_0;
                Update_String_Delay_1 <= Update_String_Delay_s;
                Update_String_Delay_s <= Update_String_In;
            end if;
        end if;
    end process;
    StringLen_1_data_reg(31 downto 16) <= "0000000000000000";
    tmp_1_reg_392(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    tmp_1_reg_392_pp0_iter1_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    Ctrl_PS_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Ctrl_PS_0_ack_out <= ap_const_logic_1;
        else 
            Ctrl_PS_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    INH_RESET <= Ctrl_PS_0_data_reg(3 downto 3);
    INH_SET <= Ctrl_PS_0_data_reg(2 downto 2);

    MISO_Sel_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MISO_Sel_0_ack_out <= ap_const_logic_1;
        else 
            MISO_Sel_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    MISO_Sel_1_ack_in_assign_proc : process(MISO_Sel_1_vld_reg)
    begin
        if (((ap_const_logic_0 = MISO_Sel_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = MISO_Sel_1_vld_reg)))) then 
            MISO_Sel_1_ack_in <= ap_const_logic_1;
        else 
            MISO_Sel_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    MISO_Sel_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, Update_Byte_Out_load_reg_377, Update_String_Out_lo_reg_382)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = Update_String_Out_lo_reg_382) and (ap_const_lv1_0 = Update_Byte_Out_load_reg_377) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MISO_Sel_1_vld_in <= ap_const_logic_1;
        else 
            MISO_Sel_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    MISO_data_address0 <= tmp_1_fu_299_p1(7 - 1 downto 0);

    MISO_data_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            MISO_data_ce0 <= ap_const_logic_1;
        else 
            MISO_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MISO_out <= 
        ap_const_lv8_FF when (tmp_s_fu_358_p2(0) = '1') else 
        MISO_data_load_reg_402;
    MOSI_data_address0 <= tmp_1_reg_392_pp0_iter1_reg(12 - 1 downto 0);

    MOSI_data_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            MOSI_data_ce0 <= ap_const_logic_1;
        else 
            MOSI_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    MOSI_data_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, Update_Byte_Out_load_reg_377_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = Update_Byte_Out_load_reg_377_pp0_iter1_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            MOSI_data_we0 <= ap_const_logic_1;
        else 
            MOSI_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    RDY_RESET <= Ctrl_PS_0_data_reg(1 downto 1);
    RDY_SET <= Ctrl_PS_0_data_reg(1 - 1 downto 0);

    StringLen_1_ack_in_assign_proc : process(StringLen_1_vld_reg)
    begin
        if (((ap_const_logic_0 = StringLen_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = StringLen_1_vld_reg)))) then 
            StringLen_1_ack_in <= ap_const_logic_1;
        else 
            StringLen_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    StringLen_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, Update_Byte_Out_load_reg_377, Update_String_Out_lo_reg_382)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = Update_String_Out_lo_reg_382) and (ap_const_lv1_0 = Update_Byte_Out_load_reg_377) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            StringLen_1_vld_in <= ap_const_logic_1;
        else 
            StringLen_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    StringUpdate_1_ack_in_assign_proc : process(StringUpdate_1_vld_reg)
    begin
        if (((ap_const_logic_0 = StringUpdate_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = StringUpdate_1_vld_reg)))) then 
            StringUpdate_1_ack_in <= ap_const_logic_1;
        else 
            StringUpdate_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    StringUpdate_1_data_in_assign_proc : process(Update_Byte_Out_load_reg_377, Update_String_Out_lo_reg_382, ap_condition_338)
    begin
        if ((ap_const_boolean_1 = ap_condition_338)) then
            if ((ap_const_lv1_1 = Update_Byte_Out_load_reg_377)) then 
                StringUpdate_1_data_in <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = Update_String_Out_lo_reg_382) and (ap_const_lv1_0 = Update_Byte_Out_load_reg_377))) then 
                StringUpdate_1_data_in <= ap_const_lv32_1;
            else 
                StringUpdate_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            StringUpdate_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    StringUpdate_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, Update_Byte_Out_load_reg_377, Update_String_Out_lo_reg_382)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = Update_Byte_Out_load_reg_377) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = Update_String_Out_lo_reg_382) and (ap_const_lv1_0 = Update_Byte_Out_load_reg_377) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            StringUpdate_1_vld_in <= ap_const_logic_1;
        else 
            StringUpdate_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Update_Byte_Out <= Update_Byte_Out_load_reg_377_pp0_iter1_reg;
    Update_Byte_Out_load_fu_245_p2 <= (tmp_3_fu_239_p2 and Update_Byte_Delay_0);
    Update_String_Out <= Update_String_Out_lo_reg_382_pp0_iter1_reg;
    Update_String_Out_lo_fu_265_p2 <= (tmp_5_fu_259_p2 and Update_String_Delay_s);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, StringUpdate_1_ack_in, StringLen_1_ack_in, MISO_Sel_1_ack_in)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_logic_0 = MISO_Sel_1_ack_in) or (ap_const_logic_0 = StringLen_1_ack_in) or (ap_const_logic_0 = StringUpdate_1_ack_in))) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, StringUpdate_1_ack_in, StringLen_1_ack_in, MISO_Sel_1_ack_in)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_logic_0 = MISO_Sel_1_ack_in) or (ap_const_logic_0 = StringLen_1_ack_in) or (ap_const_logic_0 = StringUpdate_1_ack_in))) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, StringUpdate_1_ack_in, StringLen_1_ack_in, MISO_Sel_1_ack_in)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_logic_0 = MISO_Sel_1_ack_in) or (ap_const_logic_0 = StringLen_1_ack_in) or (ap_const_logic_0 = StringUpdate_1_ack_in))) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(StringUpdate_1_ack_in, StringLen_1_ack_in, MISO_Sel_1_ack_in)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_const_logic_0 = MISO_Sel_1_ack_in) or (ap_const_logic_0 = StringLen_1_ack_in) or (ap_const_logic_0 = StringUpdate_1_ack_in));
    end process;


    ap_condition_338_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_338 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_58_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_58 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    tmp_1_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ByteCnt),64));
    tmp_3_fu_239_p2 <= (ap_const_lv1_1 xor Update_Byte_Delay_1);
    tmp_4_fu_310_p2 <= std_logic_vector(unsigned(ByteCnt) + unsigned(ap_const_lv16_1));
    tmp_5_fu_259_p2 <= (ap_const_lv1_1 xor Update_String_Delay_1);
    tmp_7_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ByteCnt_load_reg_387),32));
    tmp_s_fu_358_p2 <= "1" when (MISO_Sel_0_data_reg = ap_const_lv32_0) else "0";
end behav;

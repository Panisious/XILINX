// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ti_spi_if,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.414000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=638,HLS_SYN_LUT=618,HLS_VERSION=2018_3}" *)

module ti_spi_if (
        ap_clk,
        ap_rst_n,
        MOSI_in,
        MISO_out,
        Update_Byte_In,
        Update_String_In,
        Update_Byte_Out,
        Update_String_Out,
        RDY_SET,
        RDY_RESET,
        INH_SET,
        INH_RESET,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] MOSI_in;
output  [7:0] MISO_out;
input  [0:0] Update_Byte_In;
input  [0:0] Update_String_In;
output  [0:0] Update_Byte_Out;
output  [0:0] Update_String_Out;
output  [0:0] RDY_SET;
output  [0:0] RDY_RESET;
output  [0:0] INH_SET;
output  [0:0] INH_RESET;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_ready;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    StringUpdate_1_ack_in;
reg    StringLen_1_ack_in;
reg    MISO_Sel_1_ack_in;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] Ctrl_PS;
reg   [31:0] Ctrl_PS_0_data_reg;
reg    Ctrl_PS_0_vld_reg;
reg    Ctrl_PS_0_ack_out;
wire   [31:0] FifoByteNum_PS;
reg   [31:0] StringUpdate_1_data_reg;
reg   [31:0] StringUpdate_1_data_in;
reg    StringUpdate_1_vld_reg;
reg    StringUpdate_1_vld_in;
reg   [31:0] StringLen_1_data_reg;
reg    StringLen_1_vld_reg;
reg    StringLen_1_vld_in;
wire   [31:0] MISO_Sel_i;
reg   [31:0] MISO_Sel_0_data_reg;
reg    MISO_Sel_0_vld_reg;
reg    MISO_Sel_0_ack_out;
reg    MISO_Sel_1_vld_reg;
reg    MISO_Sel_1_vld_in;
wire   [11:0] MOSI_data_address0;
reg    MOSI_data_ce0;
reg    MOSI_data_we0;
wire   [6:0] MISO_data_address0;
reg    MISO_data_ce0;
wire   [7:0] MISO_data_q0;
reg   [0:0] Update_Byte_Delay_0;
reg   [0:0] Update_Byte_Delay_1;
reg   [0:0] Update_String_Delay_s;
reg   [0:0] Update_String_Delay_1;
reg   [15:0] ByteCnt;
reg   [7:0] MOSI_in_read_reg_372;
reg   [7:0] MOSI_in_read_reg_372_pp0_iter1_reg;
wire   [0:0] Update_Byte_Out_load_fu_245_p2;
reg   [0:0] Update_Byte_Out_load_reg_377;
reg   [0:0] Update_Byte_Out_load_reg_377_pp0_iter1_reg;
wire   [0:0] Update_String_Out_lo_fu_265_p2;
reg   [0:0] Update_String_Out_lo_reg_382;
reg   [0:0] Update_String_Out_lo_reg_382_pp0_iter1_reg;
reg   [15:0] ByteCnt_load_reg_387;
wire   [63:0] tmp_1_fu_299_p1;
reg   [63:0] tmp_1_reg_392;
reg   [63:0] tmp_1_reg_392_pp0_iter1_reg;
reg   [7:0] MISO_data_load_reg_402;
wire   [31:0] tmp_7_fu_322_p1;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire   [15:0] tmp_4_fu_310_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_3_fu_239_p2;
wire   [0:0] tmp_5_fu_259_p2;
wire   [0:0] tmp_s_fu_358_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_58;
reg    ap_condition_338;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 Ctrl_PS_0_data_reg = 32'd0;
#0 Ctrl_PS_0_vld_reg = 1'b0;
#0 StringUpdate_1_data_reg = 32'd0;
#0 StringUpdate_1_vld_reg = 1'b0;
#0 StringLen_1_data_reg = 32'd0;
#0 StringLen_1_vld_reg = 1'b0;
#0 MISO_Sel_0_data_reg = 32'd0;
#0 MISO_Sel_0_vld_reg = 1'b0;
#0 MISO_Sel_1_vld_reg = 1'b0;
#0 Update_Byte_Delay_0 = 1'd0;
#0 Update_Byte_Delay_1 = 1'd0;
#0 Update_String_Delay_s = 1'd0;
#0 Update_String_Delay_1 = 1'd0;
#0 ByteCnt = 16'd0;
end

ti_spi_if_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
ti_spi_if_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .Ctrl_PS(Ctrl_PS),
    .FifoByteNum_PS(FifoByteNum_PS),
    .StringUpdate(StringUpdate_1_data_reg),
    .StringUpdate_ap_vld(StringUpdate_1_vld_reg),
    .StringLen(StringLen_1_data_reg),
    .StringLen_ap_vld(StringLen_1_vld_reg),
    .MISO_Sel_o(32'd0),
    .MISO_Sel_o_ap_vld(MISO_Sel_1_vld_reg),
    .MISO_Sel_i(MISO_Sel_i),
    .MOSI_data_address0(MOSI_data_address0),
    .MOSI_data_ce0(MOSI_data_ce0),
    .MOSI_data_we0(MOSI_data_we0),
    .MOSI_data_d0(MOSI_in_read_reg_372_pp0_iter1_reg),
    .MISO_data_address0(MISO_data_address0),
    .MISO_data_ce0(MISO_data_ce0),
    .MISO_data_q0(MISO_data_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_58)) begin
        if ((1'd1 == Update_Byte_Out_load_fu_245_p2)) begin
            ByteCnt <= tmp_4_fu_310_p2;
        end else if (((1'd1 == Update_String_Out_lo_fu_265_p2) & (1'd0 == Update_Byte_Out_load_fu_245_p2))) begin
            ByteCnt <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == MISO_Sel_1_vld_reg) & (1'b1 == MISO_Sel_1_vld_in))) begin
        MISO_Sel_1_vld_reg <= 1'b1;
    end else if (((1'b0 == MISO_Sel_1_vld_in) & (1'b1 == 1'b1) & (1'b1 == MISO_Sel_1_vld_reg))) begin
        MISO_Sel_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == StringLen_1_vld_reg) & (1'b1 == StringLen_1_vld_in))) begin
        StringLen_1_vld_reg <= 1'b1;
    end else if (((1'b0 == StringLen_1_vld_in) & (1'b1 == 1'b1) & (1'b1 == StringLen_1_vld_reg))) begin
        StringLen_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == StringUpdate_1_vld_reg) & (1'b1 == StringUpdate_1_vld_in))) begin
        StringUpdate_1_vld_reg <= 1'b1;
    end else if (((1'b0 == StringUpdate_1_vld_in) & (1'b1 == 1'b1) & (1'b1 == StringUpdate_1_vld_reg))) begin
        StringUpdate_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ByteCnt_load_reg_387 <= ByteCnt;
        MISO_data_load_reg_402 <= MISO_data_q0;
        MOSI_in_read_reg_372 <= MOSI_in;
        MOSI_in_read_reg_372_pp0_iter1_reg <= MOSI_in_read_reg_372;
        Update_Byte_Out_load_reg_377 <= Update_Byte_Out_load_fu_245_p2;
        Update_Byte_Out_load_reg_377_pp0_iter1_reg <= Update_Byte_Out_load_reg_377;
        Update_String_Out_lo_reg_382 <= Update_String_Out_lo_fu_265_p2;
        Update_String_Out_lo_reg_382_pp0_iter1_reg <= Update_String_Out_lo_reg_382;
        tmp_1_reg_392[15 : 0] <= tmp_1_fu_299_p1[15 : 0];
        tmp_1_reg_392_pp0_iter1_reg[15 : 0] <= tmp_1_reg_392[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == Ctrl_PS_0_vld_reg) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b1 == Ctrl_PS_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == Ctrl_PS_0_vld_reg)))) begin
        Ctrl_PS_0_data_reg <= Ctrl_PS;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == MISO_Sel_0_vld_reg) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b1 == MISO_Sel_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == MISO_Sel_0_vld_reg)))) begin
        MISO_Sel_0_data_reg <= MISO_Sel_i;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == StringLen_1_vld_reg) & (1'b1 == StringLen_1_vld_in)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b1 == 1'b1) & (1'b1 == StringLen_1_vld_in) & (1'b1 == StringLen_1_vld_reg)))) begin
        StringLen_1_data_reg[15 : 0] <= tmp_7_fu_322_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == StringUpdate_1_vld_reg) & (1'b1 == StringUpdate_1_vld_in)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b1 == 1'b1) & (1'b1 == StringUpdate_1_vld_in) & (1'b1 == StringUpdate_1_vld_reg)))) begin
        StringUpdate_1_data_reg <= StringUpdate_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Update_Byte_Delay_0 <= Update_Byte_In;
        Update_Byte_Delay_1 <= Update_Byte_Delay_0;
        Update_String_Delay_1 <= Update_String_Delay_s;
        Update_String_Delay_s <= Update_String_In;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Ctrl_PS_0_ack_out = 1'b1;
    end else begin
        Ctrl_PS_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MISO_Sel_0_ack_out = 1'b1;
    end else begin
        MISO_Sel_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == MISO_Sel_1_vld_reg) | ((1'b1 == 1'b1) & (1'b1 == MISO_Sel_1_vld_reg)))) begin
        MISO_Sel_1_ack_in = 1'b1;
    end else begin
        MISO_Sel_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == Update_String_Out_lo_reg_382) & (1'd0 == Update_Byte_Out_load_reg_377) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MISO_Sel_1_vld_in = 1'b1;
    end else begin
        MISO_Sel_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MISO_data_ce0 = 1'b1;
    end else begin
        MISO_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MOSI_data_ce0 = 1'b1;
    end else begin
        MOSI_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == Update_Byte_Out_load_reg_377_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MOSI_data_we0 = 1'b1;
    end else begin
        MOSI_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == StringLen_1_vld_reg) | ((1'b1 == 1'b1) & (1'b1 == StringLen_1_vld_reg)))) begin
        StringLen_1_ack_in = 1'b1;
    end else begin
        StringLen_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == Update_String_Out_lo_reg_382) & (1'd0 == Update_Byte_Out_load_reg_377) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StringLen_1_vld_in = 1'b1;
    end else begin
        StringLen_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == StringUpdate_1_vld_reg) | ((1'b1 == 1'b1) & (1'b1 == StringUpdate_1_vld_reg)))) begin
        StringUpdate_1_ack_in = 1'b1;
    end else begin
        StringUpdate_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_338)) begin
        if ((1'd1 == Update_Byte_Out_load_reg_377)) begin
            StringUpdate_1_data_in = 32'd0;
        end else if (((1'd1 == Update_String_Out_lo_reg_382) & (1'd0 == Update_Byte_Out_load_reg_377))) begin
            StringUpdate_1_data_in = 32'd1;
        end else begin
            StringUpdate_1_data_in = 'bx;
        end
    end else begin
        StringUpdate_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == Update_Byte_Out_load_reg_377) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == Update_String_Out_lo_reg_382) & (1'd0 == Update_Byte_Out_load_reg_377) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        StringUpdate_1_vld_in = 1'b1;
    end else begin
        StringUpdate_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INH_RESET = Ctrl_PS_0_data_reg[32'd3];

assign INH_SET = Ctrl_PS_0_data_reg[32'd2];

assign MISO_data_address0 = tmp_1_fu_299_p1;

assign MISO_out = ((tmp_s_fu_358_p2[0:0] === 1'b1) ? 8'd255 : MISO_data_load_reg_402);

assign MOSI_data_address0 = tmp_1_reg_392_pp0_iter1_reg;

assign RDY_RESET = Ctrl_PS_0_data_reg[32'd1];

assign RDY_SET = Ctrl_PS_0_data_reg[0:0];

assign Update_Byte_Out = Update_Byte_Out_load_reg_377_pp0_iter1_reg;

assign Update_Byte_Out_load_fu_245_p2 = (tmp_3_fu_239_p2 & Update_Byte_Delay_0);

assign Update_String_Out = Update_String_Out_lo_reg_382_pp0_iter1_reg;

assign Update_String_Out_lo_fu_265_p2 = (tmp_5_fu_259_p2 & Update_String_Delay_s);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b0 == MISO_Sel_1_ack_in) | (1'b0 == StringLen_1_ack_in) | (1'b0 == StringUpdate_1_ack_in))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b0 == MISO_Sel_1_ack_in) | (1'b0 == StringLen_1_ack_in) | (1'b0 == StringUpdate_1_ack_in))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b0 == MISO_Sel_1_ack_in) | (1'b0 == StringLen_1_ack_in) | (1'b0 == StringUpdate_1_ack_in))) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((1'b0 == MISO_Sel_1_ack_in) | (1'b0 == StringLen_1_ack_in) | (1'b0 == StringUpdate_1_ack_in));
end

always @ (*) begin
    ap_condition_338 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_58 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign tmp_1_fu_299_p1 = ByteCnt;

assign tmp_3_fu_239_p2 = (1'd1 ^ Update_Byte_Delay_1);

assign tmp_4_fu_310_p2 = (ByteCnt + 16'd1);

assign tmp_5_fu_259_p2 = (1'd1 ^ Update_String_Delay_1);

assign tmp_7_fu_322_p1 = ByteCnt_load_reg_387;

assign tmp_s_fu_358_p2 = ((MISO_Sel_0_data_reg == 32'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    StringLen_1_data_reg[31:16] <= 16'b0000000000000000;
    tmp_1_reg_392[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    tmp_1_reg_392_pp0_iter1_reg[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //ti_spi_if
